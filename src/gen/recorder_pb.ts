// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file recorder.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message Position
 */
export class Position extends Message<Position> {
  /**
   * @generated from field: uint64 line = 1;
   */
  line = protoInt64.zero;

  /**
   * @generated from field: uint64 character = 2;
   */
  character = protoInt64.zero;

  constructor(data?: PartialMessage<Position>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Position";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "character", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Position {
    return new Position().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Position {
    return new Position().fromJsonString(jsonString, options);
  }

  static equals(a: Position | PlainMessage<Position> | undefined, b: Position | PlainMessage<Position> | undefined): boolean {
    return proto3.util.equals(Position, a, b);
  }
}

/**
 * @generated from message Range
 */
export class Range extends Message<Range> {
  /**
   * @generated from field: Position start = 1;
   */
  start?: Position;

  /**
   * @generated from field: Position end = 2;
   */
  end?: Position;

  constructor(data?: PartialMessage<Range>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Range";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: Position },
    { no: 2, name: "end", kind: "message", T: Position },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Range {
    return new Range().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Range {
    return new Range().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Range {
    return new Range().fromJsonString(jsonString, options);
  }

  static equals(a: Range | PlainMessage<Range> | undefined, b: Range | PlainMessage<Range> | undefined): boolean {
    return proto3.util.equals(Range, a, b);
  }
}

/**
 * @generated from message Selection
 */
export class Selection extends Message<Selection> {
  /**
   * @generated from field: Position anchor = 1;
   */
  anchor?: Position;

  /**
   * @generated from field: Position active = 2;
   */
  active?: Position;

  constructor(data?: PartialMessage<Selection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Selection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "anchor", kind: "message", T: Position },
    { no: 2, name: "active", kind: "message", T: Position },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Selection {
    return new Selection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Selection {
    return new Selection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Selection {
    return new Selection().fromJsonString(jsonString, options);
  }

  static equals(a: Selection | PlainMessage<Selection> | undefined, b: Selection | PlainMessage<Selection> | undefined): boolean {
    return proto3.util.equals(Selection, a, b);
  }
}

/**
 * @generated from message TextDocumentContentChange
 */
export class TextDocumentContentChange extends Message<TextDocumentContentChange> {
  /**
   * @generated from field: Range range = 1;
   */
  range?: Range;

  /**
   * @generated from field: uint64 range_offset = 2;
   */
  rangeOffset = protoInt64.zero;

  /**
   * @generated from field: uint64 range_length = 3;
   */
  rangeLength = protoInt64.zero;

  /**
   * @generated from field: string text = 4;
   */
  text = "";

  constructor(data?: PartialMessage<TextDocumentContentChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "TextDocumentContentChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "range", kind: "message", T: Range },
    { no: 2, name: "range_offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "range_length", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextDocumentContentChange {
    return new TextDocumentContentChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextDocumentContentChange {
    return new TextDocumentContentChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextDocumentContentChange {
    return new TextDocumentContentChange().fromJsonString(jsonString, options);
  }

  static equals(a: TextDocumentContentChange | PlainMessage<TextDocumentContentChange> | undefined, b: TextDocumentContentChange | PlainMessage<TextDocumentContentChange> | undefined): boolean {
    return proto3.util.equals(TextDocumentContentChange, a, b);
  }
}

/**
 * @generated from message StartingPoint
 */
export class StartingPoint extends Message<StartingPoint> {
  /**
   * @generated from field: uint64 position = 1;
   */
  position = protoInt64.zero;

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: string language = 3;
   */
  language = "";

  /**
   * @generated from field: repeated Selection selections = 4;
   */
  selections: Selection[] = [];

  constructor(data?: PartialMessage<StartingPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "StartingPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "language", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "selections", kind: "message", T: Selection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartingPoint {
    return new StartingPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartingPoint {
    return new StartingPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartingPoint {
    return new StartingPoint().fromJsonString(jsonString, options);
  }

  static equals(a: StartingPoint | PlainMessage<StartingPoint> | undefined, b: StartingPoint | PlainMessage<StartingPoint> | undefined): boolean {
    return proto3.util.equals(StartingPoint, a, b);
  }
}

/**
 * @generated from message StopPoint
 */
export class StopPoint extends Message<StopPoint> {
  /**
   * @generated from field: uint64 position = 1;
   */
  position = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<StopPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "StopPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopPoint {
    return new StopPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopPoint {
    return new StopPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopPoint {
    return new StopPoint().fromJsonString(jsonString, options);
  }

  static equals(a: StopPoint | PlainMessage<StopPoint> | undefined, b: StopPoint | PlainMessage<StopPoint> | undefined): boolean {
    return proto3.util.equals(StopPoint, a, b);
  }
}

/**
 * @generated from message Frame
 */
export class Frame extends Message<Frame> {
  /**
   * @generated from field: uint64 position = 1;
   */
  position = protoInt64.zero;

  /**
   * @generated from field: repeated TextDocumentContentChange changes = 2;
   */
  changes: TextDocumentContentChange[] = [];

  /**
   * @generated from field: repeated Selection selections = 3;
   */
  selections: Selection[] = [];

  constructor(data?: PartialMessage<Frame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Frame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "position", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "changes", kind: "message", T: TextDocumentContentChange, repeated: true },
    { no: 3, name: "selections", kind: "message", T: Selection, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Frame {
    return new Frame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Frame {
    return new Frame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Frame {
    return new Frame().fromJsonString(jsonString, options);
  }

  static equals(a: Frame | PlainMessage<Frame> | undefined, b: Frame | PlainMessage<Frame> | undefined): boolean {
    return proto3.util.equals(Frame, a, b);
  }
}

/**
 * @generated from message Action
 */
export class Action extends Message<Action> {
  /**
   * @generated from oneof Action.value
   */
  value: {
    /**
     * @generated from field: StartingPoint starting_point = 1;
     */
    value: StartingPoint;
    case: "startingPoint";
  } | {
    /**
     * @generated from field: StopPoint stop_point = 2;
     */
    value: StopPoint;
    case: "stopPoint";
  } | {
    /**
     * @generated from field: Frame frame = 3;
     */
    value: Frame;
    case: "frame";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Action>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Action";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "starting_point", kind: "message", T: StartingPoint, oneof: "value" },
    { no: 2, name: "stop_point", kind: "message", T: StopPoint, oneof: "value" },
    { no: 3, name: "frame", kind: "message", T: Frame, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Action {
    return new Action().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Action {
    return new Action().fromJsonString(jsonString, options);
  }

  static equals(a: Action | PlainMessage<Action> | undefined, b: Action | PlainMessage<Action> | undefined): boolean {
    return proto3.util.equals(Action, a, b);
  }
}

/**
 * @generated from message Record
 */
export class Record extends Message<Record> {
  /**
   * @generated from field: repeated Action actions = 1;
   */
  actions: Action[] = [];

  constructor(data?: PartialMessage<Record>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Record";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "actions", kind: "message", T: Action, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Record {
    return new Record().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Record {
    return new Record().fromJsonString(jsonString, options);
  }

  static equals(a: Record | PlainMessage<Record> | undefined, b: Record | PlainMessage<Record> | undefined): boolean {
    return proto3.util.equals(Record, a, b);
  }
}

